import React, { useState, useCallback } from 'react';
import {
  View,
  Modal,
  StyleSheet,
  ActivityIndicator,
  TouchableOpacity,
  Text,
} from 'react-native';
import {
  GoogleSignin,
  statusCodes,
} from '@react-native-google-signin/google-signin';
import { supabase } from '../services/SupabaseConfig';

interface GoogleSignInProps {
  visible: boolean;
  onClose: () => void;
  onSuccess: (user: any) => void;
  onError: (error: string) => void;
}

const GoogleSignIn: React.FC<GoogleSignInProps> = ({
  visible,
  onClose,
  onSuccess,
  onError,
}) => {
  const [loading, setLoading] = useState(false);

  const signIn = useCallback(async () => {
    try {
      setLoading(true);
      console.log('üîç Google Sign-In ÏãúÏûë...');

      // Google Sign-In ÏÑ§Ï†ï
      GoogleSignin.configure({
        webClientId:
          '179993011809-ek5ukf33irn0galn755mrhcka8n67jr4.apps.googleusercontent.com', // Android client ID (type 1)
        iosClientId:
          '179993011809-ek5ukf33irn0galn755mrhcka8n67jr4.apps.googleusercontent.com', // Android client ID for iOS
        offlineAccess: true,
        hostedDomain: '',
        forceCodeForRefreshToken: true,
        scopes: ['profile', 'email'],
      });

      // Google Sign-In Ïã§Ìñâ
      const userInfo = (await GoogleSignin.signIn()) as any;

      console.log('‚úÖ Google Sign-In ÏÑ±Í≥µ:', userInfo);
      console.log('üîç userInfo Íµ¨Ï°∞:', JSON.stringify(userInfo, null, 2));

      // ID ÌÜ†ÌÅ∞ ÌôïÏù∏
      if (!userInfo.idToken) {
        console.error('‚ùå ID ÌÜ†ÌÅ∞Ïù¥ ÏóÜÏäµÎãàÎã§.');
        console.log('üîç userInfo ÌÇ§Îì§:', Object.keys(userInfo));

        // ID ÌÜ†ÌÅ∞ÏùÑ Î™ÖÏãúÏ†ÅÏúºÎ°ú ÏöîÏ≤≠
        try {
          const tokens = await GoogleSignin.getTokens();
          console.log('üîç Î™ÖÏãúÏ†Å ÌÜ†ÌÅ∞ ÏöîÏ≤≠ Í≤∞Í≥º:', tokens);

          if (tokens.idToken) {
            console.log('‚úÖ Î™ÖÏãúÏ†Å ID ÌÜ†ÌÅ∞ ÌöçÎìù ÏÑ±Í≥µ');
            userInfo.idToken = tokens.idToken;
          } else {
            onError('Google ID ÌÜ†ÌÅ∞ÏùÑ Î∞õÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.');
            return;
          }
        } catch (tokenError) {
          console.error('‚ùå Î™ÖÏãúÏ†Å ÌÜ†ÌÅ∞ ÏöîÏ≤≠ Ïã§Ìå®:', tokenError);
          onError('Google ID ÌÜ†ÌÅ∞ÏùÑ Î∞õÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.');
          return;
        }
      }

      // ID ÌÜ†ÌÅ∞ÏùÑ SupabaseÏóê Ï†ÑÏÜ°
      const { data, error } = await supabase.auth.signInWithIdToken({
        provider: 'google',
        token: userInfo.idToken,
      });

      if (error) {
        console.error('‚ùå Supabase ID ÌÜ†ÌÅ∞ Î°úÍ∑∏Ïù∏ Ïã§Ìå®:', error);
        onError('Supabase Î°úÍ∑∏Ïù∏Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
        return;
      }

      if (data.user) {
        console.log('‚úÖ Supabase Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ:', data.user.email);
        onSuccess(data.user);
      } else {
        console.log('‚ùå Supabase ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥Í∞Ä ÏóÜÏäµÎãàÎã§.');
        onError('Î°úÍ∑∏Ïù∏ ÏôÑÎ£å ÌõÑ ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥Î•º Î∞õÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.');
      }
    } catch (error: any) {
      console.error('‚ùå Google Sign-In Ïã§Ìå®:', error);

      if (error.code === statusCodes.SIGN_IN_CANCELLED) {
        onError('Google Î°úÍ∑∏Ïù∏Ïù¥ Ï∑®ÏÜåÎêòÏóàÏäµÎãàÎã§.');
      } else if (error.code === statusCodes.IN_PROGRESS) {
        onError('Google Î°úÍ∑∏Ïù∏Ïù¥ Ïù¥ÎØ∏ ÏßÑÌñâ Ï§ëÏûÖÎãàÎã§.');
      } else if (error.code === statusCodes.PLAY_SERVICES_NOT_AVAILABLE) {
        onError('Google Play ServicesÎ•º ÏÇ¨Ïö©Ìï† Ïàò ÏóÜÏäµÎãàÎã§.');
      } else {
        onError(error.message || 'Google Î°úÍ∑∏Ïù∏Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
      }
    } finally {
      setLoading(false);
    }
  }, [onError, onSuccess]);

  const handleClose = () => {
    onClose();
  };

  React.useEffect(() => {
    if (visible) {
      signIn();
    }
  }, [visible, signIn]);

  return (
    <Modal
      visible={visible}
      animationType="fade"
      transparent={true}
      onRequestClose={handleClose}
    >
      <View style={styles.container}>
        <View style={styles.content}>
          {loading ? (
            <>
              <ActivityIndicator size="large" color="#007AFF" />
              <Text style={styles.loadingText}>Google Î°úÍ∑∏Ïù∏ Ï§ë...</Text>
            </>
          ) : (
            <>
              <Text style={styles.title}>Google Î°úÍ∑∏Ïù∏</Text>
              <Text style={styles.message}>Google Í≥ÑÏ†ïÏúºÎ°ú Î°úÍ∑∏Ïù∏Ìï©ÎãàÎã§.</Text>
              <TouchableOpacity
                onPress={handleClose}
                style={styles.closeButton}
              >
                <Text style={styles.closeButtonText}>Îã´Í∏∞</Text>
              </TouchableOpacity>
            </>
          )}
        </View>
      </View>
    </Modal>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  content: {
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    padding: 24,
    margin: 20,
    alignItems: 'center',
    minWidth: 280,
  },
  title: {
    fontSize: 18,
    fontWeight: '600',
    color: '#000000',
    marginBottom: 12,
  },
  message: {
    fontSize: 14,
    color: '#666666',
    textAlign: 'center',
    marginBottom: 20,
    lineHeight: 20,
  },
  loadingText: {
    marginTop: 16,
    fontSize: 16,
    color: '#666666',
  },
  closeButton: {
    backgroundColor: '#007AFF',
    paddingHorizontal: 20,
    paddingVertical: 12,
    borderRadius: 8,
  },
  closeButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: '600',
  },
});

export default GoogleSignIn;
