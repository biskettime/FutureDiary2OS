# Resolve react_native_pods.rb with node to allow for hoisting
require Pod::Executable.execute_command('node', ['-p',
  'require.resolve(
    "react-native/scripts/react_native_pods.rb",
    {paths: [process.argv[1]]},
  )', __dir__]).strip

platform :ios, min_ios_version_supported
prepare_react_native_project!

linkage = ENV['USE_FRAMEWORKS']
if linkage != nil
  Pod::UI.puts "Configuring Pod with #{linkage}ally linked Frameworks".green
  use_frameworks! :linkage => linkage.to_sym
end

target 'FutureDiary' do
  config = use_native_modules!

  use_react_native!(
    :path => config[:reactNativePath],
    # An absolute path to your application root.
    :app_path => "#{Pod::Config.instance.installation_root}/.."
  )

  post_install do |installer|
    # https://github.com/facebook/react-native/blob/main/packages/react-native/scripts/react_native_pods.rb#L197-L202
    react_native_post_install(
      installer,
      config[:reactNativePath],
      :mac_catalyst_enabled => false,
      # :ccache_enabled => true
    )
    
    # Fix SocketRocket compilation issues with aggressive settings
    installer.pods_project.targets.each do |target|
      target.build_configurations.each do |config|
        # Aggressive compiler settings to suppress all warnings
        config.build_settings['CLANG_WARN_STRICT_PROTOTYPES'] = 'NO'
        config.build_settings['CLANG_WARN_DOCUMENTATION_COMMENTS'] = 'NO'
        config.build_settings['GCC_WARN_64_TO_32_BIT_CONVERSION'] = 'NO'
        config.build_settings['CLANG_WARN_IMPLICIT_FUNCTION_DECLARATIONS'] = 'NO'
        config.build_settings['CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF'] = 'NO'
        config.build_settings['GCC_WARN_PEDANTIC'] = 'NO'
        config.build_settings['CLANG_WARN_EVERYTHING'] = 'NO'
        config.build_settings['WARNING_CFLAGS'] = '-w'
        config.build_settings['GCC_WARN_INHIBIT_ALL_WARNINGS'] = 'YES'
        
        # Specific settings for SocketRocket with maximum compatibility
        if target.name == 'SocketRocket'
          config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)']
          config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'SR_ENABLE_LOG=1'
          config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'typeof=__typeof__'
          config.build_settings['CLANG_ENABLE_OBJC_WEAK'] = 'YES'
          config.build_settings['GCC_C_LANGUAGE_STANDARD'] = 'gnu99'
          config.build_settings['CLANG_ENABLE_OBJC_ARC'] = 'YES'
          config.build_settings['GCC_WARN_UNUSED_VARIABLE'] = 'NO'
          config.build_settings['GCC_WARN_UNUSED_FUNCTION'] = 'NO'
          config.build_settings['CLANG_ENABLE_MODULES'] = 'NO'
          config.build_settings['CLANG_ANALYZER_LOCALIZABILITY_NONLOCALIZED'] = 'NO'
          config.build_settings['CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS'] = 'NO'
          config.build_settings['CLANG_WARN_OBJC_IMPLICIT_ATOMIC_PROPERTIES'] = 'NO'
          config.build_settings['CLANG_WARN_DIRECT_OBJC_ISA_USAGE'] = 'NO'
          config.build_settings['CLANG_WARN_OBJC_ROOT_CLASS'] = 'NO'
          config.build_settings['GCC_WARN_UNDECLARED_SELECTOR'] = 'NO'
          config.build_settings['CLANG_WARN_UNGUARDED_AVAILABILITY'] = 'NO'
          
          # Force C89 compatibility for typeof
          config.build_settings['OTHER_CFLAGS'] = '-Dtypeof=__typeof__ -w'
        end
      end
    end
  end
end
